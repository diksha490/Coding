239. Sliding Window Maximum

Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Follow up:
Could you solve it in linear time?

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

 SOLUTION 1:(Time Limit Exceeded)
 class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
      int result[]=new int[nums.length-k+1];
      int index=0;
      PriorityQueue<Integer> queue=new PriorityQueue<>(new Comparator<Integer>(){
        public int compare(Integer a,Integer b)
        {
          return b-a;
          
        }
      });
      
      for(int i=0;i<k;i++)
        queue.add(nums[i]);
      
      result[index++]=queue.peek();
      for(int i=k;i<nums.length;i++)
      {
        queue.remove(nums[i-k]);
        queue.add(nums[i]);
        result[index++]=queue.peek();
      }
     return result; 
        
    }
}

SOLUTION 2:-

class Solution {
public int[] maxSlidingWindow(int[] nums, int k) {
        int window = nums.length-k+1;
        int res[] = new int[window];
        for(int i=0; i < window;i++){
            int j=i;
            int max = Integer.MIN_VALUE;
            while(j < nums.length && j < k){
                if(nums[j]>max){
                    max = nums[j];
                }
                j++;
            }
            k++;
            res[i]=max;
        }
        return res;
    }
}
