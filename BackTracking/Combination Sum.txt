Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all
unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

SOLUTION:-

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
      List<List<Integer>> result=new ArrayList<>();
      List<Integer> list=new ArrayList<>();
      dfs(candidates,result,list,target,0);
      return result;
        
    }
   private void dfs(int[] candidates,List<List<Integer>> result,List<Integer> list,int sum,int i)
   {
     if(sum<0)
       return;
     if(sum==0)
     {
       result.add(new ArrayList(list));
       return;
     }
     while(i<candidates.length)
     {
       list.add(candidates[i]);
       dfs(candidates,result,list,sum-candidates[i],i);
       i++;
       list.remove(list.size()-1);
     }
   }
}