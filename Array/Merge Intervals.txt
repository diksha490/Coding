Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

SOLUTION:-
class Solution {
   public int[][] merge(int[][] intervals) {  
        Arrays.sort(intervals,(a,b)->Integer.compare(a[0],b[0]));  //  sort acc to start time
        ArrayList<int[]> list = new ArrayList<>();
        int index=0;
        while(index<intervals.length)
        {
            int start=intervals[index][0];
            int end=intervals[index][1];
            while(index+1<intervals.length && end>=intervals[index+1][0])
            {
             end=Math.max(end,Math.max(intervals[index][1],intervals[index+1][1]));
             index=index+1;
            }
            list.add(new int[]{start,end});
            index=index+1;
        }
        return list.toArray(new int[list.size()][2]);
    }

}