216. Combination Sum III

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

SOLUTION:-

class Solution {
    List<List<Integer>> result=new ArrayList<>();
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<Integer> list=new ArrayList<>();
        dfs(k,n,list,1);
        return result;
    }
    
    public void dfs(int k,int n,List<Integer> list,int index)
    {
      if(list.size()==k && n==0)
      {
        result.add(new ArrayList<>(list));
        return;
      }
      for(int i=index;i<=9;i++)
      {
        list.add(i);
        dfs(k,n-i,list,i+1);
        list.remove(list.size()-1);
      }

  }
}