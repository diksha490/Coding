    1
    /     \
   2       3
  /  \    / \
 4    5  6   7
Top view of the above binary tree is
4 2 1 3 7

        1
      /   \
    2       3
      \   
        4  
          \
            5
             \
               6
Top view of the above binary tree is
2 1 3 6

//CODE
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package topview;
import java.util.*;

/**
 *
 * @author Dell
 */
public class TopView {
    int hd=0;
    Node root;
    void findTopView(Node root)
    {
       Queue<Pair> q=new LinkedList<>();
       HashMap<Integer,Integer> map=new HashMap<>();
       if(root==null)
           return;
       q.add(new Pair(root,hd));
       Pair p;
       while(!q.isEmpty())
       {
           p=q.remove();
           if(p.n.left!=null)
               q.add(new Pair(p.n.left,p.hd-1));
           if(p.n.right!=null)
               q.add(new Pair(p.n.right,p.hd+1));
           if(!map.containsKey(p.hd))
           {
              // ArrayList<Integer> arr=new ArrayList<>();
              // arr.add(p.n.val);
               map.put(p.hd,p.n.val);
           }
       }
       for(Map.Entry<Integer,Integer> entry:map.entrySet())
           System.out.println(entry.getValue());
           
       
    }
    public static void main(String[] args) {
        TopView tree = new TopView(); 
        tree.root = new Node(1); 
        tree.root.left = new Node(2); 
        tree.root.right = new Node(3); 
        tree.root.left.right = new Node(4); 
        tree.root.left.right.right = new Node(5); 
        tree.root.left.right.right.right = new Node(6); 
        System.out.println("Following are nodes in top view of Binary Tree");  
        tree.findTopView(tree.root); 
        // TODO code application logic here
    }
    
}
class Node
{
    int val;
    Node left,right;
    Node(int val)
    {
        this.val=val;
        left=right=null;
    }
}
class Pair
{
    Node n;
    int hd;
    Pair(Node n,int hd)
    {
        this.n=n;
        this.hd=hd;
    }
 }
