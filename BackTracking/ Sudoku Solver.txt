#Leetcode 37
Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
Empty cells are indicated by the character '.'

Note:

The given board contain only digits 1-9 and the character '.'.
You may assume that the given Sudoku puzzle will have a single unique solution.
The given board size is always 9x9.

SOLUTION:-

class Solution {
    public void solveSudoku(char[][] board) {
      int n=board.length;
      solve(board,n);
        
    }
   public boolean solve(char[][] board,int n)
   {
     int row=-1;
     int col=-1;
     boolean flag=true;
     for(int i=0;i<n;i++)
     {
       for(int j=0;j<n;j++)
       {
         if(board[i][j]=='.')
         {
           row=i;
           col=j;
           flag=false;
           break;
         }
       }
       if(!flag)
         break;
     }
     if(flag)
       return true;
     
     for(int num=1;num<=n;num++)
     {
       if(isSafe(board,row,col,num))
       {
         char c=(char)(num+'0');
         board[row][col]=c;
         if(solve(board,n))
           return true;
         else
           board[row][col]='.';
       }  
     } 
    return false; 
   }
  
   public boolean isSafe(char board[][],int row,int col,int num)
   {
     char c=(char)(num+'0');
     int n=board.length;
     for(int i=0;i<n;i++)
       if(board[row][i]==c)
         return false;
     
     for(int i=0;i<n;i++)
       if(board[i][col]==c)
         return false;
     
     int sqrtvalue=(int)Math.sqrt(n);
     int rowstart=row-row%sqrtvalue;
     int colstart=col-col%sqrtvalue;
     
     for(int i=rowstart;i<rowstart+sqrtvalue;i++)
     {
       for(int j=colstart;j<colstart+sqrtvalue;j++)
       {
         if(board[i][j]==c)
           return false;
       }
     }
     return true;
   }
}

