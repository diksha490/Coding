**The N Queen is the problem of placing N chess queens on an NÃ—N chessboard so that no two queens attack each other**
 
 public class Main
{
	public static void main(String[] args) {
		System.out.println("Hello World");
		int n=8;
		NQueen queen=new NQueen(n);
		queen.solveNQ();
		               
		
	}
}

class NQueen
{
   int totalQueen;
   int board[][];
   NQueen(int n)
   {
       totalQueen=n;
       board=new int[n][n];
       for(int i=0;i<n;i++)                   
       {
          for(int j=0;j<n;j++)
          {
            board[i][j]=0;
           }
        }    
   }
   boolean solveNQ()    
   {
     if (solveNQUtil(0) == false) 
     { 
            System.out.print("Solution does not exist"); 
            return false; 
     } 
      printSolution(); 
      return true;
            
   }
   
   boolean solveNQUtil(int col)
   {
       if (col >= totalQueen) 
            return true; 
  
        /*Consider this column try for each row*/
        for (int i = 0; i < totalQueen; i++) {     
            if (isSafe(i, col)) { 
                                            
                board[i][col] = 1;                      //Place this queen in board[i][col]
  
                if (solveNQUtil(col + 1) == true)       // recur to place rest of the queens
                    return true; 
  
                board[i][col] = 0;                      // BACKTRACK 
            } 
        } 
  
        /* If the queen can not be placed in any row in 
           this colum col, then return false */
        return false;               
    }
    boolean isSafe(int row, int col) 
    { 
        int i, j; 
  
       
        for (i = 0; i < col; i++)                     //check row on left side
            if (board[row][i] == 1) 
                return false; 
        
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)  //Check upper diagonal on left side
            if (board[i][j] == 1) 
                return false; 
  
       
        for (i = row, j = col; j >= 0 && i <totalQueen; i++, j--)  //Check lower diagonal on left side
            if (board[i][j] == 1) 
                return false; 
  
        return true; 
    } 
    void printSolution() 
    { 
        for (int i = 0; i <totalQueen; i++) { 
            for (int j = 0; j <totalQueen; j++) 
                System.out.print(" " + board[i][j] 
                                 + " "); 
            System.out.println(); 
        } 
    } 
  
}

                                         