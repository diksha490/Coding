Circular Queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last
position is connected back to the first position to make a circle.
In a normal Queue, we can insert elements until queue becomes full. But once queue becomes full, we can not insert the next element 
even if there is a space in front of queue.

//CODE
package circularqueue;

public class CircularQueue {

    int front;
    int rear;
    int size;
    int arr[];
    CircularQueue(int n)
    {
        front=rear=-1;
        size=n;
        arr=new int[n];
    }
    void enqueue(int element)
    {
       if((rear==(size-1)&&front==0)||rear==(front-1)%(size-1))
       {
           System.out.println("Queue is full");
       }
       else if(front==-1)                                                                             
       {
           front=rear=0;
           arr[rear]=element;
       }
       else if(rear==size-1&&front!=0)                                         
       {
           rear=0;
           arr[rear]=element;
       }
       else
       {
           rear++;
           arr[rear]=element;
       }
    }
    
    int dequeue()
    {
        if(front==-1)
        {    
            System.out.println("queue is empty");
            return -1;
        }
        int value=arr[front];
        if(front==rear)                          //single element in queue
             front=rear=-1;
        else if(front==size-1)
            front=0;
        else
            front++;
        return value;
     }
    
    void display()
    {
        if(front==-1)
            System.out.println("queue is empty");
        else if(rear>=front)
        {
            for(int i=front;i<=rear;i++)
                System.out.print(arr[i]+" ");
        }
        else
        {
            for(int i=front;i<size;i++)
                System.out.print(arr[i]+" ");
            for(int i=0;i<=rear;i++)
                System.out.print(arr[i]+" ");
        }
            
    }
    public static void main(String[] args) {
        CircularQueue q=new CircularQueue(5);
        q.enqueue(14); 
        q.enqueue(22); 
        q.enqueue(13); 
        q.enqueue(-6); 
  
    // Display elements present in Circular Queue 
        q.display(); 
  
    // Deleting elements from Circular Queue 
      System.out.println("Deleted value"+q.dequeue()); 
      System.out.println("Deleted value"+q.dequeue()); 
    q.display(); 
  
    q.enqueue(9); 
    q.enqueue(20); 
    q.enqueue(5); 
  
    q.display(); 
  
    q.enqueue(20); 
        
        
    }
    
}
