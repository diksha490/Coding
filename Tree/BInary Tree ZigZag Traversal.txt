Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and 
alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

//CODE
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        
            List<List<Integer>> result=new ArrayList<List<Integer>>();
            Queue<TreeNode> queue=new LinkedList<TreeNode>();
            if(root==null)
                return result;
            int level=0;
            queue.add(root);
            while(!queue.isEmpty())
            {
                int size=queue.size();
                List<Integer> arr=new ArrayList<Integer>();
                while(size>0)
                {
                  TreeNode temp=queue.poll();
                  arr.add(temp.val);
                  if(temp.left!=null)
                          queue.add(temp.left);
                   if(temp.right!=null)
                          queue.add(temp.right);
                 
                  size--; 
                }
                if(level%2==1)
                    Collections.reverse(arr);
               level++;
               result.add(arr); 
            }
        return result;
        
    }
}