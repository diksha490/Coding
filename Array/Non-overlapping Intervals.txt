435. Non-overlapping Intervals

Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
Example 1:
Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.

Example 2:
Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.

Example 3:
Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.

SOLUTION:-

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
      if(intervals.length<1)
        return 0;
      Arrays.sort(intervals,(a,b)->Integer.compare(a[1],b[1]));
      int count=0;
      for(int i=0,j=1;j<intervals.length;j++)
      {
        if(intervals[i][1]>intervals[j][0])
          count++;
        else
          i=j;
      }
      return count;
    }
}