(#Leetcode 17) Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

SOLUTION:-

class Solution {
    public List<String> letterCombinations(String digits) {
      List<String> list=new ArrayList<>();
      if(digits==null || digits.length()==0)
        return list;
      String table[]={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
      find(list,table,digits);
      return list;
        
    }
   public void find(List<String> list,String table[],String digits)
   {
     char arr[]=digits.toCharArray();
     Queue<String> queue=new LinkedList<>();
     queue.add("");
     while(!queue.isEmpty())
     {
       String temp=queue.remove();
       if(temp.length()==digits.length())
         list.add(temp);
       else
       {
         char ch=digits.charAt(temp.length());
         String val=table[ch-'0'];
         for(int i=0;i<val.length();i++)
           queue.add(temp+val.charAt(i));
       }
       
     }
   }
}