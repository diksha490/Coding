(Leetcode 114) Flatten Binary Tree to Linked List

Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6
The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

SOLUTION:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<TreeNode> list=new ArrayList<>();
    
    public void flatten(TreeNode root) {
       if(root==null)
         return;
      inorder(root);
      TreeNode curr=root;
      for(int i=0;i<list.size()-1;i++)
      {
        list.get(i).left=null;
        list.get(i).right=list.get(i+1);
      }
        
    }
  
    public void inorder(TreeNode root)
    {
      if(root==null)
        return;
      list.add(root);
      inorder(root.left);
      inorder(root.right);
    }
}          