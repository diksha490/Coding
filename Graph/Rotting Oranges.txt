994. Rotting Oranges

In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

Example 1:
Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.

SOLUTION:-

class Solution {
   int dx[]={-1,0,1,0};
   int dy[]={0,1,0,-1};
    public int orangesRotting(int[][] grid) {
      Queue<Pair> queue=new LinkedList<>();
      for(int i=0;i<grid.length;i++)
      {
        for(int j=0;j<grid[0].length;j++)
        {
          if(grid[i][j]==2)
            queue.add(new Pair(0,i,j));
        }
      }
      int count=-1;
      while(!queue.isEmpty())
      {
        Pair p=queue.poll();
        count=p.time;
        for(int i=0;i<4;i++)
        {
          int x=dx[i]+p.x;
          int y=dy[i]+p.y;
          if(isValid(x,y,grid) && grid[x][y]==1)
          {
            queue.add(new Pair(p.time+1,x,y));
            grid[x][y]=2;
          }
        }
      }  
        
        for(int i=0;i<grid.length;i++)
        {
          for(int j=0;j<grid[0].length;j++)
          {
            if(grid[i][j]==1)
              return -1;
          }
        }
        
        if(count==-1)
          return 0;
        return count;
      }
  
    public boolean isValid(int x,int y,int[][] grid)
    {
      if(x<0||y<0||x>=grid.length||y>=grid[0].length)
        return false;
      return true;
    }
}

class Pair
{
  int time;
  int x;
  int y;
  Pair(int time,int x,int y)
  {
    this.time=time;
    this.x=x;
    this.y=y;
  }
}