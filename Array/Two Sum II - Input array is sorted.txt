Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.

Note:

Your returned answers (both index1 and index2) are not zero-based.
You may assume that each input would have exactly one solution and you may not use the same element twice.

SOLUTION 1:-(Using HashMap)

class Solution {
    public int[] twoSum(int[] numbers, int target) {
      int result[]=new int[2];
        result[0]=-1;
        result[1]=-1;
        HashMap<Integer,Integer> map=new HashMap<>();
        
        for(int i=0;i<numbers.length;i++)
        {
            if(!map.containsKey(numbers[i]))
                map.put(numbers[i],i);
        }
        
        for(int i=0;i<numbers.length;i++)
        {
            if(map.containsKey(target-numbers[i]) && map.get(target-numbers[i])!=i)
            {
                result[0]=map.get(target-numbers[i])+1;
                result[1]=i+1;
            }
        }
       return result; 
        
    }
}

SOLUTION 2:-(Two Pointers Approach)

class Solution {
    public int[] twoSum(int[] numbers, int target) {
      int result[]=new int[2];
      int left=0;
      int right=numbers.length-1;
      while(left<right)
      {
        if(numbers[left]+numbers[right]<target)
           left++;
        else if(numbers[left]+numbers[right]>target)
          right--;
        else
        {
          result[0]=left+1;
          result[1]=right+1;
          break;
        }
      }
      return result;  
    }
}