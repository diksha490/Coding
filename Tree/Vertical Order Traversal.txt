Given a binary tree, print it vertically. The following example illustrates vertical order traversal.
           1
        /    \ 
       2      3
      / \   /   \
     4   5  6   7
               /  \ 
              8   9 
               
              
The output of print this tree vertically will be:
4
2
1 5 6
3 8
7
9

//CODE
package verticalordertraversal;
import java.util.*;


public class VerticalOrderTraversal {

    Node root;
    void verticalOrder(Node root)
    {
        Queue<Pair> q=new LinkedList<>();
        HashMap<Integer,ArrayList<Integer>> h=new HashMap<>();
        ArrayList<Integer> temp;
        int hd=0;
        
        if(root==null)
        {
            System.out.println("null");
            return;
        }
        
        q.add(new Pair(root,hd));
        Pair p;
        while(!q.isEmpty())
        {
            p=q.remove();
            if(p.n.left!=null)
                q.add(new Pair(p.n.left,p.hd-1));
            if(p.n.right!=null)
                q.add(new Pair(p.n.right,p.hd+1));
            if(!h.containsKey(p.hd))
            {
                ArrayList<Integer> arr=new ArrayList<>();
                arr.add(p.n.val);
                h.put(p.hd,arr);
            }
            else
            {
                temp=h.get(p.hd);
                temp.add(p.n.val);
                h.replace(p.hd,temp);
            }
         }
        
         for(Map.Entry<Integer,ArrayList<Integer>> entry :h.entrySet())
             System.out.println(entry.getValue());
        
        
    }
    public static void main(String[] args) {
        
        VerticalOrderTraversal tree=new VerticalOrderTraversal();
        tree.root = new Node(1); 
        tree.root.left = new Node(2); 
        tree.root.right = new Node(3); 
        tree.root.left.left = new Node(4); 
        tree.root.left.right = new Node(5); 
        tree.root.right.left = new Node(6); 
        tree.root.right.right = new Node(7); 
        tree.root.right.left.right = new Node(8); 
        tree.root.right.right.right = new Node(9); 
        
        System.out.println("Vertical order traversal: ");
        tree.verticalOrder(tree.root);
    }
    
}
class Node
{
    int val;
    Node left,right;
    Node(int item)
    {
        val=item;
        left=right=null;
    }
}

class Pair
{
    Node n;
    int hd;     //horizontal distance
    Pair(Node n,int hd)
    {
        this.n=n;
        this.hd=hd;
    }
}