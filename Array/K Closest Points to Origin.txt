973. K Closest Points to Origin
We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].


SOLUTION:-

class Solution {
    public int[][] kClosest(int[][] points, int K) 
    {
      PriorityQueue<Pair> queue=new PriorityQueue<>(new Comparator<Pair>(){
        public int compare(Pair p1,Pair p2)
        {
          return (int)(p1.dist-p2.dist);
        }
      });
      for(int i=0;i<points.length;i++)
      {
        int xcoord=points[i][0];
        int ycoord=points[i][1];
        queue.add(new Pair(xcoord,ycoord));
      }
      int result[][]=new int[K][2];
      int i=0;
      while(!queue.isEmpty() && i<K)
      {
        Pair p=queue.remove();
        result[i][0]=p.x;
        result[i][1]=p.y;
        i++;
      }
    return result;
  }
}
class Pair
{
  int x;
  int y;
  double dist;
  Pair(int x,int y)
  {
    this.x=x;
    this.y=y;
    this.dist=(x*x)+(y*y);
  }
}