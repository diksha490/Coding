There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays.

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5


SOLUTION 1:-
(Time Complexity : O(m+n))

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
         int m=nums1.length;
         int n=nums2.length;
         int result[]=new int[m+n];
         int index=0;
         int i=0;
         int j=0;
         while(i<m && j<n)
         {
           if(nums1[i]<nums2[j])
             result[index++]=nums1[i++];
           else
             result[index++]=nums2[j++];
         }
        while(i<m)
          result[index++]=nums1[i++];
        while(j<n)
          result[index++]=nums2[j++];
  
         if((m+n)%2!=0)
           return result[(m+n)/2];
         else
           return (result[(m+n-1)/2]+result[(m+n)/2])/2.0;
    }
}
______________________________________________________________________________________________________________

SOLUTION 2:-
(Time Complexity:-O(log(min(m,n))))

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
         if(nums1.length>nums2.length)
             return findMedianSortedArrays(nums2,nums1);
        int x=nums1.length;
        int y=nums2.length;
        int low=0;
        int high=x;
        while(low<=high)
        {
          int partitionX=(low+high)/2;
          int partitionY=(x+y+1)/2-partitionX;
          int maxleftX=(partitionX==0)?Integer.MIN_VALUE:nums1[partitionX-1];
          int minrightX=(partitionX==x)?Integer.MAX_VALUE:nums1[partitionX];
          int maxleftY=(partitionY==0)?Integer.MIN_VALUE:nums2[partitionY-1];
          int minrightY=(partitionY==y)?Integer.MAX_VALUE:nums2[partitionY];
          
          if(maxleftX<=minrightY && maxleftY<=minrightX)
          {
            if((x+y)%2==0)
              return (double)(Math.max(maxleftX,maxleftY)+Math.min(minrightX,minrightY))/2;
            else
              return (double)Math.max(maxleftX,maxleftY);
          }
          else if(maxleftX > minrightY)
             high=partitionX-1;
          else
             low=partitionX+1;
        }
        
       return 0;    
    }
}