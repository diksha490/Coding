895. Maximum Frequency Stack
Implement FreqStack, a class which simulates the operation of a stack-like data structure.

FreqStack has two functions:

push(int x), which pushes an integer x onto the stack.
pop(), which removes and returns the most frequent element in the stack.
If there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.
 

Example 1:

Input: 
["FreqStack","push","push","push","push","push","push","pop","pop","pop","pop"],
[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]
Output: [null,null,null,null,null,null,null,5,7,5,4]
Explanation:
After making six .push operations, the stack is [5,7,5,7,4,5] from bottom to top.  Then:

pop() -> returns 5, as 5 is the most frequent.
The stack becomes [5,7,5,7,4].

pop() -> returns 7, as 5 and 7 is the most frequent, but 7 is closest to the top.
The stack becomes [5,7,5,4].

pop() -> returns 5.
The stack becomes [5,7,4].

pop() -> returns 4.
The stack becomes [5,7].

SOLUTION:-

class FreqStack {
    HashMap<Integer,Integer> valueMap;
    HashMap<Integer,Stack<Integer>> freqMap;
    int maxfreq=0;
  
    public FreqStack() 
    {
        valueMap=new HashMap<>();
        freqMap=new HashMap<>();
    }
    
    public void push(int x) 
    {
       int count=valueMap.getOrDefault(x,0)+1;
       valueMap.put(x,count);
       if(count>maxfreq)
         maxfreq=count;
      if(freqMap.containsKey(count))
      {
        Stack<Integer> tempstck=freqMap.get(count);
        tempstck.push(x);
        freqMap.put(count,tempstck);
      }
      else
      {
        Stack<Integer> tempstck=new Stack<>();
        tempstck.push(x);
        freqMap.put(count,tempstck);
      }
    }
    
    public int pop() 
    {
        int x=freqMap.get(maxfreq).pop();
        valueMap.put(x,valueMap.get(x)-1);
        if(freqMap.get(maxfreq).size()==0)
          maxfreq--;
        return x;
    }
}

/**
 * Your FreqStack object will be instantiated and called as such:
 * FreqStack obj = new FreqStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 */