#  Construct Binary Tree from Preorder and Inorder Traversal

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7

   ## CODE
   /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int n=inorder.length;
        if(n<=0)
            return null;
        Queue<Integer> q=new LinkedList<Integer>();
        Map<Integer,Integer> map=new HashMap();
        for(int i=0;i<n;i++)
        {
            q.add(preorder[i]);
            map.put(inorder[i],i);
        }
        
        int root=q.poll();
        int k=map.get(root);
        
        TreeNode tree=new TreeNode(root);
        tree.left=build(q,map,0,k-1);
        tree.right=build(q,map,k+1,n-1);
        return tree;
    }
    
   public TreeNode build(Queue<Integer> q,Map<Integer,Integer> map,int i,int j)
   {
       if(j-i<0 || q.isEmpty())
           return null;
       
       int root=q.poll();
       int k=map.get(root);
       
       TreeNode tree=new TreeNode(root);
       tree.left=build(q,map,i,k-1);
       tree.right=build(q,map,k+1,j);
       return tree;
   }
}