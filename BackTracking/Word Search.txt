Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those 
horizontally or vertically neighboring. The same letter cell may not be used more than once.

Example:

board =
[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]

Given word = "ABCCED", return true.
Given word = "SEE", return true.
Given word = "ABCB", return false.

SOLUTION:-
class Solution {
    public boolean exist(char[][] board, String word) {
       int m=board.length;
       int n=board[0].length;
       int visited[][]=new int[m][n];
       for(int i=0;i<m;i++)
         for(int j=0;j<n;j++)
                   visited[i][j]=-1;
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(helper(board,0,i,j,word,visited))
                    return true;
       return false;
        
    }
    public boolean helper(char[][] board,int index,int i,int j,String word,int visited[][])
    {
        if(index==word.length())
            return true;
        if(isSafe(board,i,j,word.charAt(index),visited))
        {
            visited[i][j]=1;
            if(helper(board,index+1,i,j+1,word,visited) || helper(board,index+1,i+1,j,word,visited) ||helper(board,index+1,i-1,j,word,visited) || helper(board,index+1,i,j-1,word,visited) )
                return true;
            visited[i][j]=-1;
            return false;
        }
        return false;
        
            
            
    }
    public boolean isSafe(char board[][],int i,int j,char ch,int visited[][])
    {
        int m=board.length;
        int n=board[0].length;
        if(i<m && i>=0 && j<n && j>=0 && visited[i][j]==-1 && board[i][j]==ch)
            return true;
        return false;
    }
    
}