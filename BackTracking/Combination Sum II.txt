(#Leetcode 40) Combination Sum II

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]

SOLUTION:-

class Solution {
    HashSet<List<Integer>> result=new HashSet<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
      List<Integer> list=new ArrayList<>();
      Arrays.sort(candidates);
      dfs(candidates,list,target,0);
      return new ArrayList(result);
   }
   
   public void dfs(int candidates[],List<Integer> list,int target,int index)
   {
     if(target==0)
     {
       result.add(new ArrayList<>(list));
       return;
     }
     if(target<0)
       return;
     
     for(int i=index;i<candidates.length;i++)
     {
       list.add(candidates[i]);
       dfs(candidates,list,target-candidates[i],i+1);
       list.remove(list.size()-1); 
     }
   }
}