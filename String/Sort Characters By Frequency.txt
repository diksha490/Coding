451. Sort Characters By Frequency
Medium

1595

126

Add to List

Share
Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

SOLUTION:-

class Solution {
    public String frequencySort(String s) {
       HashMap<Character,Integer> map=new HashMap<>();
       PriorityQueue<Pair> queue=new PriorityQueue<>(new Comparator<Pair>()        {
         public int compare(Pair p1,Pair p2)
         {
           return p2.count-p1.count;
         }
       });
      for(int i=0;i<s.length();i++)
      {
        int val=map.getOrDefault(s.charAt(i),0);
        map.put(s.charAt(i),val+1);
      }
      for(Map.Entry<Character,Integer> e:map.entrySet())
      {
        char val=e.getKey();
        int count=e.getValue();
        queue.add(new Pair(val,count));
      }
      StringBuilder sb=new StringBuilder();
      while(!queue.isEmpty())
      {
        Pair p=queue.remove();
        for(int i=0;i<p.count;i++)
        {
          sb.append(p.val);
        }
      }
      return sb.toString(); 
    }
}
class Pair
{
  char val;
  int count;
  Pair(char val,int count)
  {
    this.val=val;
    this.count=count;
  }
}
