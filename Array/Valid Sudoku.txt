Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following
rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.

The Sudoku board could be partially filled, where empty cells are filled with the character '.'.

Example 1:

Input:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
Output: true

SOLUTION:-
class Solution {
    public boolean isValidSudoku(char[][] board) {
        HashSet<Character> set=new HashSet<Character>(9);
        for(int i=0;i<9;i++)
        {  
            for(int j=0;j<9;j++)
            {
                if(board[i][j]!='.')
                {
                    if(!set.contains(board[i][j]))
                        set.add(board[i][j]);
                    else
                        return false;
                }
            }
           set.clear(); 
        }   
        
        for(int i=0;i<9;i++)
        {  
            for(int j=0;j<9;j++)
            {
                if(board[j][i]!='.')
                {
                    if(!set.contains(board[j][i]))
                        set.add(board[j][i]);
                    else
                        return false;
                }
            }
           set.clear(); 
        } 
    
       for(int row=0;row<9;row=row+3)
       {
           for(int col=0;col<9;col=col+3)
           {
              for(int i=row;i<row+3;i++)
              {  
                for(int j=col;j<col+3;j++)
                 {
                    if(board[i][j]!='.')
                    {
                       if(!set.contains(board[i][j]))
                            set.add(board[i][j]);
                       else
                           return false;
                    }
                  }
               } 
             set.clear();  
           }
        }
        return true;
    
        
    }
}