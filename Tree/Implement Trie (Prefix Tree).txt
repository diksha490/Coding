208. Implement Trie (Prefix Tree)

Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

SOLUTION:-

class Trie {

    Node root;
    public Trie() {
        root=new Node();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
       Node temp=root;
        for(char c:word.toCharArray())
        {
            if(temp.getchild(c)==null)
                temp.ifabsent(c);
            temp=temp.getchild(c);
        }
        temp.end=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node temp=root;
        int flag=0;
        char tempch='\0';
        for(char c:word.toCharArray())
        {
            tempch=c;
            if(temp.getchild(c)==null)
            {
                flag=1;
                break;
            }
                temp=temp.getchild(c); 
        }
        if(flag==1 || !temp.end)
            return false;
        return true;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node temp=root;
        int flag=0;
        for(char c:prefix.toCharArray())
        {
            if(temp.getchild(c)==null)
            {
                flag=1;
                break;
            }
            temp=temp.getchild(c);
        }
        if(flag==1)
            return false;
        return true;
        
    }
}
class Node
{
    HashMap<Character,Node> children;
    boolean end;
    Node()
    {
        this.children=new HashMap<>();
    }
    public void ifabsent(char c)
    {
        children.put(c,new Node());
    }
    public Node getchild(char c)
    {
        return children.get(c);
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */