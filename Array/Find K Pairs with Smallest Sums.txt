You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u,v) which consists of one element from the first array and one element from the second array.

Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.

Example 1:

Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]] 
Explanation: The first 3 pairs are returned from the sequence: 
             [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:

Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [1,1],[1,1]
Explanation: The first 2 pairs are returned from the sequence: 
             [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:

Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [1,3],[2,3]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]


SOLUTION:-

class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
      
      PriorityQueue<Pair> queue=new PriorityQueue<>(new Comparator<Pair>(){
        public int compare(Pair p1,Pair p2)
        {
          return (p1.x+p1.y)-(p2.x+p2.y);
        }
      });
      int dirs[][]={{0,1},{1,0},{1,1}};
      List<List<Integer>> result=new ArrayList<>();
       if(nums1==null || nums2==null || nums1.length==0 || nums2.length==0) 
         return result;
      queue.add(new Pair(nums1[0],nums2[0],0,0));
      boolean visit[][]=new boolean[nums1.length][nums2.length];
      visit[0][0]=true;
      while(!queue.isEmpty())
      {
        Pair p=queue.remove();
        List<Integer> list=new ArrayList<>();
        list.add(p.x);
        list.add(p.y);
        result.add(list);
        if(result.size()==k)
          break;
        int i=p.i;
        int j=p.j;
        for(int dir[]:dirs)
        {
          int di=i+dir[0];
          int dj=j+dir[1];
          if(di<0 || dj<0 || di>=nums1.length || dj>=nums2.length || visit[di][dj]==true)
            continue;
          queue.add(new Pair(nums1[di],nums2[dj],di,dj));
          visit[di][dj]=true;
        }
        
      }
      return result;
        
    }
   
}

class Pair
{
  int x;
  int y;
  int i;
  int j;
  Pair(int x,int y,int i,int j)
  {
    this.x=x;
    this.y=y;
    this.i=i;
    this.j=j;
  }
}

