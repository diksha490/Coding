Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

 

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

Example 2:

Given the following tree [1,2,2,3,3,null,null,4,4]:

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
Return false.

//CODE

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        
        int leftHeight,rightHeight;
  
        if (root== null) 
            return true; 
 
        leftHeight=findHeight(root.left); 
        rightHeight=findHeight(root.right); 
  
        if (Math.abs(leftHeight-rightHeight) <= 1
            && isBalanced(root.left) 
            && isBalanced(root.right)) 
            return true; 
  
        return false; 
        
    }
    
    public int findHeight(TreeNode root)
    {  
        int leftHeight=0;
        int rightHeight=0;
        if(root==null)
            return 0;
        
      int height=Math.max(findHeight(root.left),findHeight(root.right))+1;
       return height;
    }   
        
}