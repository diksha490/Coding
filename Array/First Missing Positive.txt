Given an unsorted integer array, find the smallest missing positive integer.

Example 1:

Input: [1,2,0]
Output: 3
Example 2:

Input: [3,4,-1,1]
Output: 2
Example 3:

Input: [7,8,9,11,12]
Output: 1

SOLUTION 1:-
class Solution {
    public int firstMissingPositive(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 0) nums[i] = 0;
        }
        
        for (int i = 0; i < nums.length; i++) {
            int targetIndex = Math.abs(nums[i]) - 1;
            if (targetIndex >= 0 && targetIndex < nums.length) {
                if (nums[targetIndex] == 0) nums[targetIndex] = Integer.MAX_VALUE;
                nums[targetIndex] = Math.abs(nums[targetIndex]) * -1;
            }
        }
       
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] >= 0) return i + 1;
        }
        return nums.length + 1;
        
    }
}

SOLUTION 2:-
class Solution {
    public int firstMissingPositive(int[] nums) {
        int n=nums.length;
        if(n==0)
            return 1;
        int count[]=new int[n];
        Arrays.fill(count,0);
        for(int num:nums)
        {
            if(num>0 && num<=n)
            {
                count[num-1]++;
            }
        }
        for(int i=0;i<n;i++)
        {
            if(count[i]==0)
                return (i+1);
        }
        return n+1;
    }
}
