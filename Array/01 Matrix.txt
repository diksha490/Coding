Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.
Example 1:

Input:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Example 2:
Input:
[[0,0,0],
 [0,1,0],
 [1,1,1]]

Output:
[[0,0,0],
 [0,1,0],
 [1,2,1]]

 SOLUTION:-
 class Solution {
    public int[][] updateMatrix(int[][] matrix) {
      int m=matrix.length;
      if(m==0)
         return matrix;
      int n=matrix[0].length;
      int newx[]={-1,0,1,0};
      int newy[]={0,-1,0,1};
      int dist[][]=new int[m][n];
      Queue<Pair> queue=new LinkedList<>();
      
      for(int i=0;i<m;i++)
      {
        for(int j=0;j<n;j++)
        {
          if(matrix[i][j]==0)
          {
            dist[i][j]=0;
            queue.add(new Pair(i,j));
          } 
          else
           dist[i][j]=Integer.MAX_VALUE;
        }
      }
      while(!queue.isEmpty())
      {
        Pair p=queue.remove();
        int x=p.xcoord;
        int y=p.ycoord;
        for(int i=0;i<4;i++)
        {
          int adjx=newx[i]+x;
          int adjy=newy[i]+y;
          if(adjx>=0 && adjx<m && adjy>=0 && adjy<n && dist[adjx][adjy]>dist[x][y]+1)
          {
            dist[adjx][adjy]=dist[x][y]+1;
            queue.add(new Pair(adjx,adjy));
          }
        }
      }
      
      return dist;
        
    }
}

class Pair
{
  int xcoord;
  int ycoord;
  Pair(int xcoord,int ycoord)
  {
    this.xcoord=xcoord;
    this.ycoord=ycoord;
  }
}