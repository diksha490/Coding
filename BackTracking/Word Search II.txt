(#Leetcode 212) Word Search II

Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]

SOLUTION:-

class Solution {
    List<String> list=new ArrayList<>();
    HashMap<String,Integer> map=new HashMap<>();
    public List<String> findWords(char[][] board, String[] words) {
        if(board.length==0)
            return list;
        
       for(String word:words)
       {
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(getWord(board,i,j,0,word))
                {
                       map.put(word,map.getOrDefault(word,0)+1);
                 }
             }
        }
       }
        //System.out.println(map);
        list.addAll(map.keySet());
        
        return list;
    }
    
      public boolean getWord(char[][] board,int i,int j,int idx,String word){
          //for(char[] arr:board)
            //  System.out.println(Arrays.toString(arr));
          
        if(i<0 || i>=board.length || j<0 || j>=board[0].length 
           || word.charAt(idx)!=board[i][j])
            return false;
        
        idx++;
        
        if(idx==word.length())return true;
        
        char c = board[i][j];
        board[i][j] = '.';
        
         if(getWord(board,i+1,j,idx,word))
           {
              board[i][j] = c;
               return true;
           }
         if(getWord(board,i,j+1,idx,word) )
           {
              board[i][j] = c;
               return true;
           }
         if(getWord(board,i,j-1,idx,word))
           {
              board[i][j] = c;
               return true;
           }
           if(getWord(board,i-1,j,idx,word) )
           {
              board[i][j] = c;
               return true;
           }
    
    
        board[i][j] = c;
    
        return false;
}
}