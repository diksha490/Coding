A linked list is given such that each node contains an additional random pointer which could point to any 
node in the list or null.

Return a deep copy of the list.

The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair 
of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does
not point to any node.

SOLUTION 1:-(Using HashMap)
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
class Solution {
    public Node copyRandomList(Node head) {
      HashMap<Node,Node> map=new HashMap<>();
      Node temp=head;
      while(temp!=null)
      {
        map.put(temp,new Node(temp.val));
        temp=temp.next;
      }
      temp=head;
      while(temp!=null)
      {
        map.get(temp).next=map.get(temp.next);
        map.get(temp).random=map.get(temp.random);
        temp=temp.next;
      }
      return map.get(head);
    }
}
______________________________________________________________________________________________________________
 SOLUTION 2:-
 class Solution {
    public Node copyRandomList(Node head) {
      if(head==null)
         return head;
      Node curr=head;
      while(curr!=null)
      {
        Node temp=curr.next;
        Node newNode=new Node(curr.val);
        curr.next=newNode;
        newNode.next=temp;
        curr=temp;
      }
      curr=head;
      while(curr!=null && curr.next!=null)
      {
        if(curr.random!=null)
          curr.next.random=curr.random.next;
        else
          curr.next.random=curr.random;
        curr=curr.next.next;
          
      }
      Node org=head;
      Node copy=head.next;
      Node copyHead=copy;
      
      while(org!=null && copy!=null)
      {
        org.next=(org.next!=null)?org.next.next:org.next;
        copy.next=(copy.next!=null)?copy.next.next:copy.next;
        org=org.next;
        copy=copy.next;
      }
      return copyHead;
    }
}
 