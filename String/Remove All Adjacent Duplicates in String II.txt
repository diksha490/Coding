Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and 
removing them causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made.

It is guaranteed that the answer is unique.

Example 1:
Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.

Example 2:
Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"

Example 3:
Input: s = "pbbcggttciiippooaais", k = 2
Output: "ps"

SOLUTION:-
class Solution {
    public String removeDuplicates(String s, int k) {
      Stack<Character> stckchar=new Stack<Character>();
      Stack<Integer> stckcount=new Stack<Integer>();
      for(char ch:s.toCharArray())
      {
        if(!stckchar.isEmpty() && stckchar.peek()==ch)
          stckcount.push(stckcount.peek()+1);
        else
          stckcount.push(1);
        stckchar.push(ch);
        if(stckcount.peek()==k)
        {
          for(int i=0;i<k;i++)
          {
            stckcount.pop();
            stckchar.pop();
          }
        }
      }
      StringBuilder sb=new StringBuilder();
      while(!stckchar.isEmpty())
      {
        sb.append(stckchar.pop());
      }
      return sb.reverse().toString();  
    }
}