LRU Cache Implementation

How to implement LRU caching scheme? What data structures should be used?
We are given total possible page numbers that can be referred. We are also given cache (or memory) size (Number of page frames that cache can hold at a time).
The LRU caching scheme is to remove the least recently used frame when the cache is full and a new page is referenced which is not there
 in cache. 

 When a page is referenced, the required page may be in the memory. If it is in the memory, we need to detach the node of the list and bring 
 it to the front of the queue.If the required page is not in memory, we bring that in memory. In simple words, we add a new node to the front 
 of the queue and update the corresponding node address in the hash. If the queue is full, i.e. all the frames are full, we remove a node from 
 rear of the queue, and add the new node to the front of the queue.

 //CODE
package lrucache;
import java.util.*;


public class LRUCache {

    static Deque<Integer> dq;
    static HashSet<Integer> map;
    static int csize;
    
    LRUCache(int n)
    {
        dq=new LinkedList<>();
        map=new HashSet<>();
        csize=n;
    }
    
    public void refer(int x)
    {
        if(!map.contains(x))
        {
            if(dq.size()==csize)
                map.remove(dq.removeLast());
        }
        else
        {
            int index=0;
            int i=0;
            Iterator<Integer> itr=dq.iterator();
            while(itr.hasNext())
            {
                if(itr.next()==x)
                {
                   index=i;
                   break;
                }
                i++;
            }
           dq.remove(index);
         }
        dq.push(x);
        map.add(x);
    }
    public void display()
    {
        Iterator<Integer> itr=dq.iterator();
        while(itr.hasNext())
            System.out.print(itr.next()+" ");
    }
    
    public static void main(String[] args) {
        LRUCache ca=new LRUCache(4);
        ca.refer(1); 
        ca.refer(2); 
        ca.refer(3); 
        ca.refer(1); 
        ca.refer(4); 
        ca.refer(5); 
        ca.display(); 
        
        
    }
    
}
