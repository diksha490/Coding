Serialization is the process of converting a data structure or object into a sequence of bits so that 
it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later
in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your
serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized
to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

SOLUTION:-

public class Codec {

    // Encodes a tree to a single string.
    StringBuilder sb=new StringBuilder();
    public String serialize(TreeNode root) {
      if(root==null)
      {
        sb.append("null").append(",");
        return null;
      }
      sb.append(root.val).append(",");
      serialize(root.left);
      serialize(root.right);
      return sb.toString();
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) 
    { 
      if(data==null || data.length()==0)
        return null;
      String arr[]=data.split(",");
      Queue<String> queue=new LinkedList<>(Arrays.asList(arr));
      return dehelper(queue);
        
    }
    public TreeNode dehelper(Queue<String> queue)
    {
      if(queue.size()==0)
        return null;
      String str=queue.poll();
      if(str.equals("null"))
        return null;
      TreeNode root=new TreeNode(Integer.parseInt(str));
      root.left=dehelper(queue);
      root.right=dehelper(queue);
      return root;
    }
}
