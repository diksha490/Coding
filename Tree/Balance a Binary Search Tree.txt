Given a binary search tree, return a balanced binary search tree with the same node values.

A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.

If there is more than one answer, return any of them.

Example 1:
Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct.

SOLUTION:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<TreeNode> list=new ArrayList<>();
    public TreeNode balanceBST(TreeNode root) {
        storeNodes(root);
        if(list.size()==0)
          return null;
      return formTree(0,list.size()-1);
    }
  
    public void storeNodes(TreeNode root)
    {
      if(root==null)
        return;
      storeNodes(root.left);
      list.add(root);
      storeNodes(root.right);
    }
  
    public TreeNode formTree(int start,int end)
    {
      if(start>end)
        return null;
      int mid=start+(end-start)/2;
      TreeNode root=list.get(mid);
      root.left=formTree(start,mid-1);
      root.right=formTree(mid+1,end);
      return root;
    }
}
