113. Path Sum II
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

SOLUTION:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result=new ArrayList<>();
        if(root==null)
          return result;
        List<Integer> list=new ArrayList<>();
        dfs(root,result,list,sum);
        return result;
    }
   
   public void dfs(TreeNode root,List<List<Integer>> result,List<Integer> list,int sum)
   {
     if(root==null)
       return;
     sum=sum-root.val;
     list.add(root.val);
     if(root.left==null && root.right==null && sum==0)
     {
       result.add(new ArrayList(list));
     }
     
     
     dfs(root.left,result,list,sum);
     dfs(root.right,result,list,sum);
     list.remove(list.size()-1);
    
   }
}