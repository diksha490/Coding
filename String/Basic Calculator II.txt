Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . 
The integer division should truncate toward zero.

Example 1:

Input: "3+2*2"
Output: 7
Example 2:

Input: " 3/2 "
Output: 1
Example 3:

Input: " 3+5 / 2 "
Output: 5

SOLUTION:-
class Solution {
    public int calculate(String s) {
     char token[]=s.toCharArray();
     Stack<Integer> values=new Stack<>();
     Stack<Character> ops=new Stack<>();
     int i=0;
     while(i<token.length)
     {
       if(token[i]==' ')
       { 
         i++;
         continue;
       }  
       if(token[i]>='0'&&token[i]<='9')
       {
         StringBuilder sb=new StringBuilder();
         while(i<token.length && token[i]>='0'&&token[i]<='9')
           sb.append(token[i++]);
         values.push(Integer.valueOf(sb.toString()));
       }
       else if(token[i]=='+'||token[i]=='-'||token[i]=='*'||token[i]=='/')
       {
         while(!ops.isEmpty() && hasPrecedence(token[i],ops.peek()))
           values.push(applyOp(ops.pop(),values.pop(),values.pop()));
         ops.push(token[i]);
         i++;
         
        
       }
     }
       while (!ops.empty()) 
            values.push(applyOp(ops.pop(), values.pop(), values.pop())); 
      return values.pop();
     
    }
   public boolean hasPrecedence(char op1,char op2)
   {
     if((op1=='*'||op1=='/')&&(op2=='+'||op2=='-'))
       return false;
     return true;
   }
   
   public int applyOp(char op,int b,int a)
   {
     switch(op)
     {
         case '+':
                   return a+b;
         case '-':
                   return a-b;
         case '*':
                   return a*b;
         case '/':
                   return a/b;
     }
     return 0;
   }
}