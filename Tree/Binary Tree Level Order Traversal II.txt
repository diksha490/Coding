107. Binary Tree Level Order Traversal II

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

SOLUTION:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
      Queue<TreeNode> queue=new LinkedList<>();
        List<List<Integer>> result=new ArrayList<>();
        if(root==null)
          return result;
       queue.add(root);
       while(!queue.isEmpty())
       {
         int size=queue.size();
         List<Integer> list=new ArrayList<>();
         while(size-->0)
         {
           TreeNode curr=queue.poll();
           list.add(curr.val);
           if(curr.left!=null)
             queue.add(curr.left);
           if(curr.right!=null)
             queue.add(curr.right);
         }  
         result.add(list);
       }
      Collections.reverse(result);
      return result;
        
    }
}