674. Longest Continuous Increasing Subsequence

Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).

Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4.

Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1. 

SOLUTION:-

class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if(nums.length==0 || nums.length==1)
          return nums.length;
        int max=0;
        int temp=1;
        int current=nums[0];
       for(int i=1;i<nums.length;i++)
       {
         if(nums[i]>current)
         {
           temp++;
           current=nums[i];
         }
         else
         {
           max=Math.max(max,temp);
           current=nums[i];
           temp=1;
         }
       }
      return Math.max(max,temp);
    }
}