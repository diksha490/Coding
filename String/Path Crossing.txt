1496. Path Crossing

Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

Return True if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. Return False otherwise.

 

Example 1:
Input: path = "NES"
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.

Example 2:
Input: path = "NESWW"
Output: true
Explanation: Notice that the path visits the origin twice.

SOLUTION:-

class Solution {
    public boolean isPathCrossing(String path) {
      char arr[]=path.toCharArray();
      HashSet<List<Integer>> set=new HashSet<>();
      List<Integer> list=new ArrayList<>();
      list.add(0);
      list.add(0);
      set.add(list);
      int dx=0;
      int dy=0;
      for(char c:arr)
      {
        if(c=='N')
        {
          dx=dx+0;
          dy=dy+1;
        }
        else if(c=='S')
        {
          dx=dx+0;
          dy=dy-1;
        }
        else if(c=='E')
        {
          dx=dx+1;
          dy=dy+0;
        }
        else
        {
          dx=dx-1;
           dy=dy+0;
        }
      
      List<Integer> temp=new ArrayList<>();
      temp.add(dx);
      temp.add(dy);
      if(set.contains(temp))
        return true;
      set.add(temp);
      }    
  
  return false;
    }   
}