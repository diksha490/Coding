Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

SOLUTION:-

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        
      HashSet<List<Integer>> result=new HashSet<>();
      if(nums.length==0)
        return new ArrayList<>(result);
      List<Integer> list=new ArrayList<>();
      boolean visit[]=new boolean[nums.length];
      findPermute(nums,result,list,visit);
      return new ArrayList<>(result);
    }
   public void findPermute(int nums[],HashSet<List<Integer>> result,List<Integer> list,boolean visit[])
   {
     if(list.size()==nums.length)
     {
       result.add(new ArrayList<>(list));
       return;
     }
     for(int i=0;i<nums.length;i++)
     {
       if(visit[i]==false)
       {
         list.add(nums[i]);
         visit[i]=true;
         findPermute(nums,result,list,visit);
         visit[i]=false;
         list.remove(list.size()-1);
       }
     }
}
}  
  
  