Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2:
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7

SOLUTION:-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<>();
        List<List<Integer>> result=new ArrayList<>();
        if(root==null)
          return -1;
       queue.add(root);
       while(!queue.isEmpty())
       {
         int size=queue.size();
         List<Integer> list=new ArrayList<>();
         while(size-->0)
         {
           TreeNode curr=queue.poll();
           list.add(curr.val);
           if(curr.left!=null)
             queue.add(curr.left);
           if(curr.right!=null)
             queue.add(curr.right);
         }  
         result.add(list);
       }
     int value=result.get(result.size()-1).get(0);
     return value; 
    }
}