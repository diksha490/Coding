Minimum time required to rot all oranges

Given a matrix of dimension m*n where each cell in the matrix can have values 0, 1 or 2 
which has the following meaning:
0: Empty cell
1: Cells have fresh oranges
2: Cells have rotten oranges 

So we have to determine what is the minimum time required so that all the oranges become rotten.
A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right).
If it is impossible to rot every orange then simply return -1.

//CODE

package rottenoranges;
import java.util.*;
public class RottenOranges {
    
    public final static int R=3;
    public final static int C=5;
    
    public static class Element
    {
        int x=0;
        int y=0;
        Element(int x,int y)
        {
            this.x=x;
            this.y=y;
        }
    }
    
    static boolean isValid(int i,int j)
    {
        return (i>=0 && j>=0 && i<R && j<C);
    }
    
    static boolean isDelim(Element temp)
    {
        return (temp.x==-1 && temp.y==-1);
    }
    
    static boolean checkAll(int arr[][]) //if there exist fresh oranges or not
    {
        for(int i=0;i<R;i++)
            for(int j=0;j<C;j++)
                if(arr[i][j]==1)
                    return true;
        return false;
    }
    
    static int rotOranges(int arr[][])
    {
        Queue<Element> queue=new LinkedList<Element>();
        Element temp;
        int timeframe=0;
        
        for(int i=0;i<R;i++)
            for(int j=0;j<C;j++)
                if(arr[i][j]==2)
                    queue.add(new Element(i,j));
        queue.add(new Element(-1,-1));
        
        while(!queue.isEmpty())
        {
          boolean flag=false;
          while(!isDelim(queue.peek()))
          {
              temp=queue.peek();
              if(isValid(temp.x+1,temp.y) && arr[temp.x+1][temp.y]==1)
              {
                 if(!flag)
                 {
                     timeframe++;
                     flag=true;
                 }
                arr[temp.x+1][temp.y]=2;
                queue.add(new Element(temp.x+1,temp.y));
              }
              if(isValid(temp.x,temp.y+1) && arr[temp.x][temp.y+1]==1)
              {
                 if(!flag)
                 {
                     timeframe++;
                     flag=true;
                 }
                arr[temp.x][temp.y+1]=2;
                queue.add(new Element(temp.x,temp.y+1));
              }
              if(isValid(temp.x-1,temp.y) && arr[temp.x-1][temp.y]==1)
              {
                 if(!flag)
                 {
                     timeframe++;
                     flag=true;
                 }
                arr[temp.x-1][temp.y]=2;
                queue.add(new Element(temp.x-1,temp.y));
              }
              if(isValid(temp.x,temp.y-1) && arr[temp.x][temp.y-1]==1)
              {
                 if(!flag)
                 {
                     timeframe++;
                     flag=true;
                 }
                arr[temp.x][temp.y-1]=2;
                queue.add(new Element(temp.x,temp.y-1));
              }
             queue.remove();
          }
          queue.remove();
           if (!queue.isEmpty())  
            { 
                queue.add(new Element(-1,-1)); 
            } 
              
        }
       return (checkAll(arr))? -1: timeframe;  
    }
        
    
    
    
    public static void main(String[] args) {
         int arr[][] = { {2, 1, 0, 2, 1}, 
                        {1, 0, 1, 2, 1}, 
                        {1, 0, 0, 2, 1}}; 
        int ans = rotOranges(arr); 
        if(ans == -1) 
            System.out.println("All oranges cannot rot"); 
        else
            System.out.println("Time required for all oranges to rot = " + ans); 
    }
    
}
